В общем, тут такое дело. Доступ к курсу у меня пропал, за 2 месяца мне необходимо изучить огромное количество материала и далеко не на базовом уровне, как говорится, не "для галочки".
Здесь должен был быть код по HTML и CSS. И он будет. Только вместо 2-х часового ролика из курса... Это основано на семи с половиной часовом ролике с ютуба. Если я зашел сюда обновить знания...
Ну что ж, тогда удачи!


!!!!!!!!!!! 5:40:21 !!!!!!!!!!!!!!!!!!!

Что бы текст можно было проще заключать в тег, нажимаю ctrl K + ctrl S, в поиск вбиваю wrap и задаю горячую клавишу. 
    1. Выделил, нажал комбинацию, написал тег БЕЗ <>. (Вариант 1, оборачивает 1 слово в тег)
    2. Выделил, нажал alt, выделил другое слово, нажал alt, выделил третье слово и тд. Нажал комбинацию, написал тег без <>, в итоге обернулись в одинаковый тег все выделенные слова.





HTML:
    Что бы создать базовую разметку html, в VS code необходимо всего-то написать ! и нажать Tab
    Что бы создать ссылку на другой html документ, нужно:
        Создать рядом с main html следущий документ 
        В документе, из которого будет переход на другой html документ, в тег a в аргумент href передать название второго документа



    Атрибут class:
                class = "name_of_class" - необходим для подключения css только к данному классу name_of_class.
                class = "name_of_class1 name_of_class2" - у тега с такой записью сразу 2 класса: name_of_class1 и name_of_class2



    Теги HTML:
        <head> - содержит спец. информацию
            <html lang = "en"></html> - содержит всю информаци о сайте
            <meta charset = "UTF-8"> - кодировка текста для корректного отображения
            <meta http-equiv="X-UA-Compatible" content="IE=edge"> - спец. информация для того, что бы документ был совместим с edge
            <meta name="viewport" content="width=device-width, inital-scale=1.0" - указывает, что ширина документа = ширине устройства, с которого он открыт и зум 
            <title>Document</title> - Название страницы
        </head>
    
        <body> - содержит основной контент страницы 
            <h1>text</h1> - заголовок, может быть лишь 1
            
            <h2></h2> - подзаголовок, может быть сколько нужно
            
            <h3></h3> - то же самое, что и h2, только меньше
            
            <p> - абзац, блок с текстом. Это блочный тег
                text 
            </p>
            
            <span>text<span> - текст, строчный тег. В отличии от p, при дублировании НЕ переносит текст на следущую строку, в отличии от css 

            <a href='', target = ""></a> - ссылка, в аргумент href передается в кавычках адрес ссылки, а между открывающим и закрывающим тегом пишется слово, при нажатии на которое открывается ссылка     
                                        в атрибут target передаю в скобках _blank что бы ссылка открывалась в новом окне. Если это не нужно - можно этот атрибут не писать.
            
            <ol> - нумерованный список
                <li>text</li>   - в li передается текст под номером 1, потом 2, потом 3 и тд
                <li>text    - для создания вложенного списка, в li не пишу закрывающий тег, а еще раз записываю структуру <ol><li></li><ol>, и после нее закрываю изначальный li </li>
                    <ol>
                        <li>text<li>
                    <ol>
                </li
            </ol>

            <ul> - ненумерованный список
                <li>text</li>
            </ul>

            <img src="" alt=""> - для добавления картинки, src - ссылка на картинку, alt - что отобразить, если не удалось загрузить картинку (текст-описание, что здесь должно было быть)

            <div> - блочный тег, используется для группировки тегов 
                <p>text</p>
                <p>text1</p>
                <span>text2</span>
            </div>

            <nav>   - структура для создания панели навигации
                <ul>
                    <li>text<li>
                    <li>text<li>
                </ul>
            </nav>

            <input type="" placeholder=""> - поле для ввода текста. Аргумент type - что вводится: Текст(text), пароль(password). placeholder - надпись на окошке.

            <button>text</button> - создает кнопку
                <button>&#9776</button> - создает "бургер" (три полоски для выпадающей менюшки)

            <header> </header> - тег, необязательно, но можно размещать внутри навигационную панель (читаемость лучше)
            <section></section> - то же, что и выше, только для основного контента 
            <footer></footer> - то же, что и выше, только для всяких адресов, контактных данных и тп


CSS:
    Каскадная таблица стилей - то есть проритетность. Необходимо для использования одинаковых по типу, но при этом разных по оформлению тегов (О приоритете ниже)

    Для подключения css есть три способа: 
        1. В теге (любом) прописываю атрибут style, затем в кавычках в формате словаря пишу, что поменять (например, <span style="font-style: italic;">text</style>)              (Максимальный приоритет)
        2. В теге head создаю тег sytle, и в него прописываю название тега (НАЗВАНИЕ, БЕЗ СКОБОК <> ), открываю фигурные скобки и пишу, что поменять, так же в формате словаря    (Средний приоритет)
            <style>
                span {
                    font-style: italic;
                }
            </style>
        3. Самый частоиспользуемый и предпочтительный: создаю папку static, в ней создаю папку styles для css, images для фото и тп. и создаю в папке styles файл style.css       (Низкий приоритет)
           В этот файл прописываем все то же, что и во 2 способе. (только не в head или style, сразу название тега/класса). Далее в файле Index.html в head создаю тег link, 
           аргументы - rel="stylesheet" (таблица стилей) href="styles.css" (ссылка на файл с css)



    Селектор в css - это имя тега/класса/id 
    Приоритет селекторов (на примере веса):
        имя тега: 1
        имя класс: 10
        id: 100
        стиль в самом теге в файле html: 1000

        имя тега.имя класса (div.name_of_class): 10 + 1 = 11
        id.имя класса: 100 + 10 = 110
        имя класса.имя класса (.class1.class2): 10 + 10 = 20

        Если же в атрибут после значения передать !important, то вес уже будет 99999999
        div {
            background-color: green !important;     - вес 999999999
        }



    Величины измерения:
        px - все логично, величина в 1 px
        em - % от родителя. то есть 0.5em = 50% от величины тега родителя. Например, если в список вложен список, в который вложен список, то в осн. списке величина текста будет 50% от предыдущего тега,
            в следующем за основным - 50% от осн. списка, или 25% от тега перед родителем и тд он будет уменьшаться вдвое. По умолчанию, если размер у тега родителя не указан и не наследуется, 
            1em = 1rem = 16px
        rem - % от главного тега. То есть в примере со вложенными списками при font-size: 0.5rem длина у всех последующих вложенных не будет уменьшаться, а будет равна половине основного тега -> html





    Скелет css:
        имя тега/класса {
            ключ: значение;
            ключ: значение;
        }
        
        ; Для тегов:
            span {
                font-style: italic;
            }
        ; Для классов:
            .name_of_class {
                font-style: italic;
            }

        где ключ - это как аргумент, ну а значение - его значение)

        .name_of_class>img  - это значит применить для тегов img, которые лежат непосредственно в контейнере с классом name_of_class
        .name_of_class img - это значит применить для тегов img, которые лежат где-то ниже, то есть в независимости от уровня вложенности 

    Псевдоклассы:
        hover позволяет изменить что-то, только когда наведен на элемент.


    Типы тегов (передаются в аргумент display):
        inline - Занимают столько места, сколько контент внутри тега 
        block - Занимет всю ширину экрана 
        inline-block - Что-то между inline и block: позволяет делать "контейнеры" определенной ширины и высоты
        flex - как block, но имеет свои параметры, помогающие в работе. Так же старается увеличивать контент до максимально доступной длины и высоты
            flex-direction: - как должен выглядеть блок: максимально в ширину (row)/ максимально в высоту (column)
            justify-content: - как центровать контент: равномерно занять весь блок (space-beetwen), по центру (center), в конце (end) 
        grid - это размещение в виде "сетки"
            grid-template-columns: 1fr 2fr 3fr; - указываю, сколько столбцов должно быть, и какою "долю" экрана они должны занимать. То есть суммарно экран это 1 + 2 + 3 - 6 частей. Тогда 1 колонна
                                                занимает 1 долю, вторая колонна занимает вторую и третью долю, и третья колонна занимает четвертую, пятую и шестую долю экранна.
            grid-template-rows: 200px 200px 200px; - указываю, сколько должен занимать блок в высоту, уже в пикселях/rem/em, что больше нравится. Что бы и rows, и в columns не писать много раз одно
                                                и то же значение, можно возпользоваться repeat(кол-во повторений, значение); Тогда команда примет вид grid-template-rows: repeat(3, 200px);
            Если необходимо адаптировать под разный размер устройств, например, кол-во колонок, то все просто: делается медиа запрос. По факту действия он напоминает if a > b:
                @media (max-width: 800px){ - если длина меньше 800px, то 
                    .class {
                        grid-template-columns: repeat(2, 1fr)       - кол-во колонок: 2
                    }
                }
                
                @media (max-wideth: 600ox){ - тогда, если длина меньше 800 и меньше 600, то... И ТД
                    .class {
                        grid-template-columns: repeat(1, 1fr)       - кол-во колонок: 1
                    }
                }

            Если же надо, к примеру, сделать 2 боковые меню, то можно разделить весь экран на 12 частей, а затем каждому блоку выделить необходимые: левому - 2 части, центральному - 8, и правому - 2.
            Для этого надо:
                1. Обернуть все в div с классом... ну логично - main-container и разделить на 12 колонн:
                    .main-container {
                        display: grid;
                        grid-template-columns: 12;
                    }
                2. Для левой меню, центрального блока, и провой меню выделить колонки (напишу для правой, для левой и центральной аналогично):
                    .right_bar {
                        grid-column: 11/13;     - где 11 - это с какой колонны включительно, 13 - до какой не включительно. То есть right_bar Займет 11 и 12 часть экрана.
                    }


    Аргументы:
        font-style: - тип текста. Значения - italic (курсив), oblique (наклонный текст, почти как курсив), normal (обычный текст)
        margin: - рамка. margin - рамка в круг, margin-top - рамка сверху
        padding: - отступ от границы контейнера внутрь до контента
        display: - позволяет сделать из блочного тега инлайновый и наооборот (inline, block, inline-block)
        text-align: - выравнивание в блоке (то есть если не задавать к примеру div аргумент weight, текст будет по центру. Если тегу div задать width, то текст (теги) будут по центру ШИРИНЫ БЛОКА div)
        width: - ширина блока. Неприменимо к inline тегам, но применим к block и inline-block. Так же полезно для изменения размера картинок.
        height: - высота блока. Неприменимо к inline тегам, но применим к block и inline-block.
        flex-direction: - как должен выглядеть блок: максимально в ширину (row)/ максимально в высоту (column), ТОЛЬКО ДЛЯ FLEX 
        justify-content: - как центровать контент: равномерно занять весь блок (space-beetwen), по центру (center), в конце (end), ТОЛЬКО ДЛЯ FLEX, где flex-direction: row;
        border-style: - стиль рамки 
        border-weight: - ширина рамки
        text-weight: bold; - позволяет сделать текст жирным
        float: right; - позволяет переместить "плавующий" элемент вправо. Не стоит с ним заигрываться. float позволяет блочному контейнеру вести себя как инлайновый
        align-items: - выравнивание блоков. ТОЛЬКО ДЛЯ FLEX. Если flex-direction: row, то выравнивает по центру по высоте блока.
        cursor: pointer; - при наведении сделать курсор как для нажатия и размещается

    

    Позиционирование:
        Аргумент position позволяет "выдернуть" контейнер из его местоположения и разместить подругому
        position: absolute; - выдергивается из своего положения и распологается под ним. Аргументы:
            top - на сколько пикселей ВНИЗ ОТНОСИТЕЛЬНО КРАЯ (да, во всех его аргументах все работает реверсивно)
            bottom - на сколько пикселей ВВЕРХ
            left - на сколько пикселей ВПРАВО 
            right - на сколько пикселей ВЛЕВо
        position: relative; - не выдергивается из своего местоположения и остается в нем, но его положение в контейнере можно изменить с помощью спец. аргументов (те же, что и в absolute).
                            Но стоит это делать аккуратно: все таки можно сделать это очень криво, и лучше не использовать его с аргументами, а использовать absolute
            



    Нумерация в <ol></ol>:
        ol {
            list-style: lower-latin; - латинские буквы 
            list-style: lower-etc; - дальше почитать, мне лень
        }


    Конструкции:
        @media (max-width: 900px) {    - если размер экрана в ширину меньше 900px, то использовать css ниже. Иначе - выше
    
        }




BOOTSTRAP:
    CDN links - ссылки с js и css от bootstrap, расположенные на серверах.
    Установка: 
        С офф. сайта https://getbootstrap.com/docs/5.3/getting-started/download/ в левом баре выбираю Download, и скачиваю архив
        С той же страницы беру CDN link и вставляю в код:
            С CSS понятно - подключаем туда же, куда и до этого: d <head>
            А вот JS лучше подключить в самом низу тега body: тогда сначала загрузится html и css, а потом уже анимации из js.

    Создание навигационной панели:
        В левом баре на сайте нашел Components, нашел ту панель, что понравилась больше всего и вставил в код.
    Создание основных элементов сайта:
        Аналогично навигационной панели 

    Итак, накидал шаблон сайта. Дальше меняю его под себя: смотрю на классы (их названия). Вообще, некоторые из них интуитивно понятны, и на что их можно заменить тоже. Но в любом случае, подробное
        описание каждого класса из bootstrap можно найти на их сайте 

        Допустим, я не нашел того, что мне нужно. Тогда я создаю свой css файл и добавляю то, что мне интересно, в уже готовые классы. Если не получается - можно попытаться поднять "вес":
            Например, я попытался изменить цвет ссылки в навигационной панели, но у меня не вышло. Что же делать? Надо открыть html файл в браузере, посмотреть код элемента, нажать на "ссылку",
                предварительно выбрав нужный инструмент в dev tools (сверху слева есть значек... только отдаленно похожий на курсор в квадрате. Если он синим - можно нажимать. Этот инструмент помогает
                быстрее найти нужный блок кода в html документе), и посмотреть styles. Скорее всего я увижу, что введенное мной значение перечеркнуто, а выше очень похожее на мое, но с доп тегом/классом,
                повышающим его вес. Мне нужно лишь дописать в моем css документе так же. Вес моего css будет выше css bootstrap, т.к он находится "ближе".


    Для сеток:
        класс для размера:
            class = "col-lg-4" - один контейнер занимает 4 доли ДЛЯ ПК (да, бутстрап сам делит экран на 12 долей)
            class = "col-md-6" - один контейней занимает 6 долей ДЛЯ ПЛАНШЕТОВ

            Подробнее - на сайте bootstrap, в правой меню grid.

    Класс для margin и padding:
        magring: Где m - обозначение margin, а число после тире - обозначение длины. без отступа (-0), 0.25rem (-1), 0.5rem (-2), 1rem (-3), 1.5rem (-4), 3rem (-5)
            class = "m-0"   во все стороны
            class = "mt-1"  вверх 
            class = "mb-2"  вниз 
            class = 'mx-3'  в стороны 
            class = 'my-4'  верх/низ 

        padding: 
            class = "p-0"   во все стороны 
            class = "pt-1"  вверх 
            class = "pb-3"  вниз
            class = "px-2"  в стороны 
            class = "py-4"  верх/низ


Для подбора шаблона можно пользоваться сайтом webcode.tools
    Для подключения анимации:
        1. Выбираю нужную анимацию 
        2. Копирую 1 блок справа, тот что без @keyframe, и в css применяю к классу нужного блока.
        3. Под этим блоком css вставляю то, что написано с @keyframe

Для выбора шрифта можно пользоваться fonts.google.com
    Что бы изменить шрифт:
        1. Прописываю в начало css документа @import url('https://fonts.googleapis.com/css?family=Michroma&display=swap'), меняя Michroma на нужный мне шрифт
        2. К body применяю font-family: Название шрифта, и такой шрифт, что будет использоваться при невозможности загрузить основной

Для изменения иконки сайта в браузере можно пользоваться сайтом favicon.io 
    Что бы изменить иконку:
        1. На сайте в навбаре заходим в generator и настраиваем иконку, после чего нажимаем download
        2. Ниже на сайте будет html код - его нужно вставить в head
        3. Распаковываем скачанный архив и переносим папку в static. 
        4. В вставленный html добавляем в начало пути относительный путь до папки favicon_io (та папка, что мы перенесли в static)

Для добавления живого фона как background:
    1. Скачиваю видео и закидываю его в static/video
    2. Создаю еще один css файл отдельно для видео и подключаю его
    3. С помощью тега video вставляю в начале тега section (прямо в самом начале) видео. 
    4. По мимо src указываю type="video/mp4" autoplay muted loop (autoplay - автовоспроизведение, muted - выкл.звук, loop - автозапуск)
    5. Помещаю video в новый div
    6. В css для видео пишу во первых для класса .class, а во вторых для видео внутри класса .class video. Наполнение они имеют одно:
        длина: в процентах (100%)
        ширина: в vh (70vh)
    7. для .bgvideo video дописываю:
        position:absolute;
        top:0;
        left:0;
        object-fit:cover;
    8. Для .bgvideo дописываю 
        position: relative;


Деплой на github pages:     PS: Деплой - загрузка проекта на хостинг 
    PSS. Можно разместить только 1 сайт туда. 
    1. Копируем папку с проектом, и в копии меняем в index.html и price.html все переменные с index.html на /
    2. Создаем на github репозиторий.
    3. Переносим папки и файлы из копии проекта в репозиторий 
    4. Нажимаем Commit changes
    5. Для входа на сайт - просто в строке вбиваем название репозитория.



Этап 1:
    Воссоздаем википедию
        Что бы форматировать документ (сделать его более читаемым), необходимо в любой точке файла нажать ПКМ и выбрать "Форматировать"


Этап 2:
    Делаем сайт с карточками


Этап 3: