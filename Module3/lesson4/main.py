 # Ленивые вычисления
import time

# # # # # Создаем список из 1_000_000_000 чисел генератором
# # # # num_list = [i for i in range(10_000_000)]
# # # #     # Долго инициализировался


# # # # # А теперь создаем такой же список, но ленивными вычислениями
# # # # num_list_leniv = (i for i in range(10_000_000))
# # # #     # Инициализировался мгновенно. Но список пока не генерировался, создался объект. Если его вызвать то уже в МОМЕНТ ИСПОЛЬЗОВАНИЯ программа будет долго инициализироваться


# # # time_list = [time.sleep(i) for i in range(1,4)]     # заснуть на 1с + 2с + 3с = 6с. Заснул)
# # # print(time_list)
# # # print('Программа завершена!')


# # time_list_leniv = (time.sleep(i) for i in range(1,4))   # а сейчас нет
# # print(time_list_leniv)
# # print('Программа завершена!')


# # # А если написать например:
# # for i in time_list_leniv:
# #     print(i)    #None
# #     # То программа опять заснула на 6с


# # А если например:

# num_list_leniv = (i for i in range(1, 100_000_000))
# print('Готово')

#     # Что-то делаю

# # Захотел использовать
# print('Начало инициализации: ')
# new_list = list(num_list_leniv)
# print(type(new_list))
# print('Инициализация окончена')
#     # Именно в этот момент будет инициализация, ну и тк число большое она будет долгая




# Интересный факт:
nums_list = list(range(100))
print(nums_list)    # Выведутся числа от 1 до 100

num = range(1, 1000)
print(num)          # range(1, 1000)
print(list(num))    # числа от 1 до 1000
# Итак: в list мы передавали генератор. Что же это значит? Да то, что range - это тоже генератор. А генератор - это тоже ленивые вычисления)