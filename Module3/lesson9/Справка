База данных - это упорядоченный набор структурированной информации или 
данных, которые обычно хранятся в электронном виде в компьютерной системе.

Базы данных бывают Реляционные и Нереляционные
    Нереляционные есть Иерархические и сетевые.
        Иерархические - древовидные структуры.     ..
                                                  /  \
                                                 .    .
                                                /\    /\
                                               .  .  .  . 
    Реляционные базы данных имеют вид таблицы.
        Типы данных в РБД:
            Числовой тип данных. Также существуют некие надстройки над 
            числовым типом, например, денежный тип данных или тип "счетчик"

            Символьный тип данных. В символьном хранятся какие-либо 
            символы. Это аналог наших строк на Python.

            Дата/время. Аналог datetime в Python

            Логический тип данных. Аналог булевому типу в Python. ()

Работать будем с SQL. 

Сейчас работаем на сайте diagrams.net.
    Слева есть менюшка с фигурами. Выбираем ПРЯМОУГОЛЬНИК. 
    Если 2 раза нажать по нему, то можно внутрь написать какой-либо текст

    Что бы не создавать новый ПРЯМОУГОЛЬНИК, можно нажать по нему 
    1 раз и CTRL+C, затем CTRL+V и вот у нас точно такой же прямоугольник.

    Что бы соединить несколько "Прямоугольников", нужно выделить их всех,
    нажать правой кнопкой мыши по ним и выбрать пункт "группировать"

    Первичный ключ - своеобразный ID. В табличку надо интегрировать 
    первичный ключ. Для начала надо разгруппировать нашу табличку. затем
    добавим "прямоугольник" с названием id, тип данных - счетчик

Первичный ключ - поле или набор полей со значениями которые являются 
уникальными для всей таблицы.
    Первичный ключ необходим для более удобного управления данными, также он 
    помогает отличать одни строки от других. 

    Виды первичных ключей:
        Суррогатный - ключ, который был добавлен искусственно и который не 
        содержит информации об объекте (сущности). (Пример - артикул товара)

        Естественный - ключ, который состоит из информациооных полей 
        таблицы (поля, содержащие полезную информацию об объекте, сущности)

Внешний ключ - столбец или сочетание столбцов, которое применяется для 
уствновления связи между данными в двух таблицах или более.

Для того что бы связать два





Sql - это декларативный язык программирования, при помощи которого 
происходит управление даннными в реляцонной базе даннных.

    SQL нельзя назвать самостоятельным языком программирования, на нем не
    получится написать программу, но почти все программы на сегодняшний
    день используют его


СУБД(Система Управления Базами Данных) - совокупность программ, которые
позволяют управлять структурой БД, а также контролируют доступ к данным,
хранящимся в БД

    Виды СУБД: PostgeSQL, MySQL, SQLite, NoSQL.
    Мы будем работать именно с SQLite 


ОПЕРАТОР SELECT:
    SELECT (ЧТО) FROM (ТАБЛИЦА) - конструкция SELECT выборки данных.
    вытащить что-то из конкректной таблицы

    ПРИМЕР: дана таблица 

                ТОВАР 
        ID  |    NAME      |  PRICE
        1   |    Наушники  |  1000
        2   |    Наушники  |  2500
        3   |    Наушники  |  3000


    Что бы выбрать ВСЕ данные мы пишем:
    SELECT * FROM ТОВАР; - выборка абсолютно всей информации из нашей 
    таблицы.    *-абсолютно все. Вместо нее может быть название столбца /
    нескольких столбцов через запятую. (SELECT пользователи, подписки FROM ТОВАР)
    . НЕ ЗАБЫВАТЬ В КОНЦЕ ЗАПРОСА СТАВИТЬ ТОЧКУ С ЗАПЯТОЙ



https://www.programiz.com/sql/online-compiler/ - сейчас работаем на
этом сайте

На этом сайте есть таблица Custromer_id. Допустим, мне нужны все
customers с возврастом > 25. Тогда надо написать:

    SELECT last_name, first_name, age    (Выбрать Имя, Фамилию, возвраст)
    FROM Custromers                      (из "Custromers")
    WERE age > 25;                        (Где age > 25)


Допустим я хочу выгрузить всех людей с гражданством Великобритании (UK)

    SELECT *
    FROM Customers 
    WERE country = "UK";            (Справа указаны типы данных, и видно,
                                    что country - warchar (строка), 
                                    поэтому UK надо писать в кавычках)



А что если я хочу добавить строчку к таблице? тогда нам нужен другой запрос,
где оператор не SELECT, а INSERT INTO
    
    INSERT INTO Customers                   (Вставить в Покупатели)
    VALUES (6, 'John', 'Smith', 28, 'UK')   (Значения (здесь заполняем
    значения, что есть в таблице (названия столбцов), в том порядке, в 
    котором они идут.))

А если я хочу заменить строчку в таблице? все очень просто:
    А нет. Написать в первом значении (Customer_id) 5, то будет ошибка,
    ведь это 'primary_key' - приватный ключ, который существует в одном
    экземпляре



А если я хочу удалить строчку?
    DELETE FROM Orders      (удалить из 'покупки')
    WHERE order_id = 5      (то, где order_id = 5)

    если я хочу удалить несколько строк - то пишем просто
    DELETE FROM Orders
    WHERE order_id = 5 OR order_id = 3
    но тогда, если к таблице Orders привязана например таблица Customers,
    то из нее они тоже удалятся. OR - потому что если написать AND, 
    то будет искаться такая строка, где одновременно order_id равен и 5 и 3,
    чего быть конечно не может.

    Вот какое решение:
    DELETE FROM Orders 
    WHERE customer_id IN (1,2)


Итак, есть еще один оператор - UPDATE. Он позволяет обновить строчку, а не
удалить ее.
    UPDATE Customers            (обновить Покупателей)
    SET age = 33                (Обновить именно ВОЗРАСТ (то, что я хочу изменить))
    WHERE customer_id = 1;      (но ведь мне не нужно, что бы у всех с
    с возрастом в 33 года он поменялся? => Выбираем того, у которого 
    customer_id (приватный ключ), - 1.)



Задание: написать такой запрос: в таблице Orders обновить заказ:
    - Keyboard = 500
    - John Reinhardt
        UPDATE Orders 
        SET amount = 500 
        WHERE customer_id = 4 AND item = 'Keyboard';
        (В данном случае писать нужно AND, ведь должны совпасть оба условия)



Тренироваться можно на сайте SQL ACADEMY (sql-academy.org)


    SELECT name 
    FROM Passenger 
    WHERE name LIKE '&man' Где name похоже на 'что-то вначале' + man

    или 
    WHERE name LIKE '__man', где _ означает 1 любой символ
    (где имя похоже на 2 символа + man)