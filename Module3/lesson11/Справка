sqlite3 - встроенная библиотека в python, которая позволяет работать с СУБД SQLite

SQLite - система управления базами данных, которая реализует не требующий настройки транзакционный механизм базы данных SQL



Транзакционный механизм — это система или набор процедур, предназначенных для управления транзакциями в информационных системах, особенно в базах данных
и программных приложениях, где требуется надежное выполнение операций с возможностью их отката или восстановления.
    Основные характеристики транзакционного механизма включают:

    Атомарность (Atomicity): Транзакция должна быть либо выполнена полностью, либо не выполнена вообще. Если транзакция не может быть завершена, система должна откатить все изменения, 
    связанные с ней.

    Согласованность (Consistency): Транзакция должна переводить систему из одного согласованного состояния в другое. После завершения транзакции данные должны оставаться в правильном 
    и согласованном состоянии.

    Изолированность (Isolation): Каждая транзакция должна выполняться так, чтобы она не вмешивалась в другие транзакции, даже если они выполняются 
    одновременно. Результаты одной транзакции не должны быть видны другим до её полного завершения.

    Долговечность (Durability): После завершения транзакции все изменения, внесенные в базу данных, должны сохраняться, даже если система выйдет из строя после завершения транзакции.



Для работы с sqlite3 необходимо создать cursor - именно он принимает все методы работы с таблицей. Лучше это делать так, потому что bd сама открывается и закрывается (с помощью контекст-менеджера)
    
    with sqlite3.connect('data.bd') as cursor:
        # как правило сюда вставляются заранее созданные методы, но можно и просто код.

А все действия с таблицей выполняются через метод курсора execute:
    cursor.execute(command)



fetchall - метод sqlite3, который выводит ВСЕ данные из таблицы 
    cursor.execute(command).fetchall



Комманда для создания таблицы (если как таковой не имеется):
    command = '''
        CREATE TABLE IF NOT EXISTS users(
        id INTEGER PRIMARY KEY,
        name TEXT,
        surname TEXT,
        gender TEXT); 
        '''

    CREATE TABLE - создать таблицу, IF NOT EXISTS - если такой еще нет. В скобках - поля таблицы и тип данных: (INTEGER PRIMARY KEY - приватный ключ,тип число, TEXT - тип текст.)
    Удобнее писать комманды в ''' ''', т.к текста много, а места на экране - нет. К тому же, можно еще и удобно 'группировать'



В этой комманде ничего нового, за одним исключением:
    command = '''
        INSERT INTO users (name, surname, gender) 
        VALUES (?, ?, ?);       
        '''

    (name, surname, gender) - названия полей, который я передаю. Id вставится автоматически. Самое интересное - это VALUES (?, ?, ?). Знак вопроса означает, что на их месте будут
    значения, которые поставлю позже: 

    cursor.execute(command, (user.name, user.surname, user.gender)) 

    Вот как-раз таки я их и подставил: на месте 1 знака вопроса будет user.name, на месте 1 - user.surname, и на месте 3 - user.gender


